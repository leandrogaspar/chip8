{"version":3,"sources":["interpreter/util.js","interpreter/font-sprites.js","interpreter/chip8.js","components/Screen/Screen.js","components/Screen/index.js","components/util.js","components/Word/Word.js","components/Word/index.js","components/VRegisters/VRegisters.js","components/VRegisters/index.js","components/Stack/Stack.js","components/Stack/index.js","components/Debug/Debug.js","components/Debug/index.js","components/OtherRegisters/OtherRegisters.js","components/OtherRegisters/index.js","components/Button/index.js","components/Button/Button.js","components/SelectROM/SelectROM.js","components/SelectROM/index.js","components/Keypad/Keypad.js","components/Keypad/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["opCode_nnn","opcode","opCode_nn","opCode_n","opCode_x","opCode_y","fontSprites","Chip8","options","this","MEM_SIZE","memSize","PC_START","pcStart","STACK_SIZE","stackSize","DISPLAY_SIZE","displaySize","screen","draw","reset","memory","Uint8Array","forEach","element","index","V","I","DT","ST","PC","SP","stack","Uint16Array","display","Array","fill","keys","waitingKey","waitingKeyTarget","key","console","log","addr","data","writeByte","executeOpCode","shouldDraw","opCode","Error","toString","opCodeFamily_0x0","opCodeFamily_0x1","opCodeFamily_0x2","opCodeFamily_0x3","opCodeFamily_0x4","opCodeFamily_0x5","opCodeFamily_0x6","opCodeFamily_0x7","opCodeFamily_0x8","opCodeFamily_0x9","opCodeFamily_0xA","opCodeFamily_0xB","opCodeFamily_0xC","opCodeFamily_0xD","opCodeFamily_0xE","opCodeFamily_0xF","throwInvalidOpCode","nnn","x","nn","y","n","sum","xMinusY","yMinusX","Math","random","row","spriteRow","bitIndex","displayPosition","keyPressed","keyNotPresseed","floor","i","Screen","props","containerRef","React","createRef","canvasRef","containerWidth","current","offsetWidth","containerHeight","offsetHeight","scale","min","canvasWidth","width","canvasHeight","height","computedStyle","getComputedStyle","document","documentElement","drawColor","getPropertyValue","shadowColor","backgroundColor","shadowBlur","ctx","fillStyle","fillRect","pixelSize","displayData","length","scaledX","scaledY","requestFrameId","window","requestAnimationFrame","bind","getContext","resizeCanvas","addEventListener","cancelAnimationFrame","removeEventListener","ref","className","Component","defaultProps","numberToPaddedHex","number","bytes","undefined","padStart","toUpperCase","Word","data-testid","label","old","memo","VRegisters","from","map","Stack","id","currentStack","oldStack","Debug","breakpoint","onChange","htmlFor","type","value","memorySlice","filter","currentMemory","breakpointMarker","memoryAddr","wordValue","Number","parseInt","OtherRegisters","Button","role","aria-label","children","onClick","onMouseUp","onMouseDown","tabIndex","PlayButton","playing","RomList","roms","rom","SelectROM","onPlayClick","a","setState","selectedRom","state","find","onPlay","fetch","response","arrayBuffer","onLoadRom","inputRef","click","onRomSelectChange","evt","target","onFileChange","preventDefault","file","files","reader","FileReader","onload","event","arrayBufferNew","result","name","blur","readAsArrayBuffer","keyMap","q","w","e","r","s","d","f","z","c","v","Keypad","handleKeyBoardevent","pressed","keyStateUpdate","onKeydown","onKeyup","useEffect","App","stopClock","chip8","byte","startClock","cycle","remainingCycles","cyclesPerTick","debug","updateChip8State","soundTimerTick","delayTimerTick","pressKey","releaseKey","onContinue","onStep","onBreakpointChange","breakpointHit","otherRegisters","myRef","intervalHandle","clearInterval","setInterval","onBreakpoint","setTimeout","pc","slice","renderControls","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.824603ec.chunk.js","sourcesContent":["export function opCode_nnn(opcode) {\n  return opcode & 0x0fff;\n}\n\nexport function opCode_nn(opcode) {\n  return opcode & 0x00ff;\n}\n\nexport function opCode_n(opcode) {\n  return opcode & 0x000f;\n}\n\nexport function opCode_x(opcode) {\n  return (opcode & 0x0f00) >> 8;\n}\n\nexport function opCode_y(opcode) {\n  return (opcode & 0x00f0) >> 4;\n}\n","// prettier-ignore\nconst fontSprites = [\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80  // F\n];\n\nexport default fontSprites;\n","import { opCode_nnn, opCode_nn, opCode_n, opCode_x, opCode_y } from './util';\nimport fontSprites from './font-sprites';\n\n/**\n * CHIP-8 Interpreter\n *\n * References:\n * - http://devernay.free.fr/hacks/chip8/C8TECH10.HTM - by Thomas P. Greene\n * - http://mattmik.com/files/chip8/mastering/chip8.html - By Matthew Mikolay\n */\nclass Chip8 {\n  /**\n   * @typedef {object} Chip8Options\n   * @property {number} [memSize=4096] - The interpreter memory map size\n   * @property {number} [pcStart=0x200] - The start position for the Program Counter\n   * @property {number} [stackSize=16] - Interpreter stack size\n   * @property {number} [displaySize=64*32] - Display size\n   */\n  /**\n   * Constructs the CHIP-8 processor\n   * @param {Chip8Options} [options] - The {@link Chip8Options} to be used by the interpreter\n   */\n  constructor(options) {\n    options = options || {};\n    this.MEM_SIZE = options.memSize || 4096;\n    this.PC_START = options.pcStart || 0x200;\n    this.STACK_SIZE = options.stackSize || 16;\n    this.DISPLAY_SIZE = options.displaySize || 64 * 32;\n    this.screen = { draw: () => {} };\n    this.reset();\n  }\n\n  /**\n   * Resets the CHIP-8 back to its default state\n   */\n  reset() {\n    this.memory = new Uint8Array(this.MEM_SIZE);\n    fontSprites.forEach((element, index) => {\n      this.memory[index] = element;\n    });\n    this.V = new Uint8Array(16);\n    this.I = 0;\n    this.DT = 0;\n    this.ST = 0;\n    this.PC = this.PC_START;\n    this.SP = 0;\n    this.stack = new Uint16Array(this.STACK_SIZE);\n    this.display = new Array(this.DISPLAY_SIZE).fill(0);\n    this.keys = {};\n    this.waitingKey = false;\n    this.waitingKeyTarget = -1;\n    this.screen.draw(this.display);\n  }\n\n  /**\n   * Set the key as pressed\n   * @param {number} key 0x0 up to 0xF\n   */\n  pressKey(key) {\n    this.keys[key & 0xf] = true;\n    if (this.waitingKey) {\n      this.V[this.waitingKeyTarget] = key;\n      this.waitingKey = false;\n    }\n  }\n\n  /**\n   * Set the key as released\n   * @param {number} key 0x0 up to 0xF\n   */\n  releaseKey(key) {\n    this.keys[key & 0xf] = false;\n  }\n\n  /**\n   * Decreases the delay timer by 1\n   */\n  delayTimerTick() {\n    if (this.DT > 0) {\n      this.DT -= 1;\n    }\n  }\n\n  /**\n   * Decreases the sound timer by 1 and stop the beep\n   */\n  soundTimerTick() {\n    if (this.ST > 0) {\n      this.ST -= 1;\n    }\n\n    if (this.ST) {\n      console.log('Stop sound!');\n    }\n  }\n\n  /**\n   * Load 2 bytes of data at the specified address\n   * @param {number} addr - Data target\n   * @param {number} data - 2 bytes of data\n   * @returns {Chip8} - The chip8 itself\n   */\n  writeWord(addr, data) {\n    this.writeByte(addr, (data >> 8) & 0xff);\n    this.writeByte(addr + 1, data & 0xff);\n    return this;\n  }\n\n  /**\n   * Write a byte at the address\n   * @param {number} addr - Data target\n   * @param {number} data - byte\n   * @returns {Chip8} - The chip8 itself\n   */\n  writeByte(addr, data) {\n    this.memory[addr] = data;\n  }\n\n  /**\n   * Performs one emulation cycle\n   */\n  cycle() {\n    if (this.waitingKey) {\n      return;\n    }\n\n    const opcode = (this.memory[this.PC] << 8) | this.memory[this.PC + 1];\n\n    this.executeOpCode(opcode);\n\n    if (this.shouldDraw) {\n      this.shouldDraw = false;\n      this.screen.draw(this.display);\n    }\n  }\n\n  /**\n   * Throws a formatted exception for invalid op codes\n   * @param {number} opCode\n   */\n  throwInvalidOpCode(opCode) {\n    throw new Error(`Invalid instruction opCode=${opCode.toString(16)}`);\n  }\n\n  /**\n   *\n   * @param {number} opCode - Operation code to be executed\n   * @throws {Error} - if the opcode is not supported\n   */\n  executeOpCode(opCode) {\n    this.PC += 2;\n    const opFamily = (opCode & 0xf000) >> 12;\n\n    // We are using the nibble of the opcode as the\n    // Operation Code \"Family\".\n    // prettier-ignore\n    switch (opFamily) {\n      case 0x0: this.opCodeFamily_0x0(opCode); return;\n      case 0x1: this.opCodeFamily_0x1(opCode); return;\n      case 0x2: this.opCodeFamily_0x2(opCode); return;\n      case 0x3: this.opCodeFamily_0x3(opCode); return;\n      case 0x4: this.opCodeFamily_0x4(opCode); return;\n      case 0x5: this.opCodeFamily_0x5(opCode); return;\n      case 0x6: this.opCodeFamily_0x6(opCode); return;\n      case 0x7: this.opCodeFamily_0x7(opCode); return;\n      case 0x8: this.opCodeFamily_0x8(opCode); return;\n      case 0x9: this.opCodeFamily_0x9(opCode); return;\n      case 0xa: this.opCodeFamily_0xA(opCode); return;\n      case 0xb: this.opCodeFamily_0xB(opCode); return;\n      case 0xc: this.opCodeFamily_0xC(opCode); return;\n      case 0xd: this.opCodeFamily_0xD(opCode); return;\n      case 0xe: this.opCodeFamily_0xE(opCode); return;\n      case 0xf: this.opCodeFamily_0xF(opCode); return;\n      default: this.throwInvalidOpCode(opCode); return;\n    }\n  }\n\n  opCodeFamily_0x0(opCode) {\n    switch (opCode) {\n      // 00E0 - Clear the screen\n      case 0x00e0:\n        this.display.fill(0);\n        break;\n      // 00EE - Return from a subroutine\n      case 0x00ee:\n        this.SP -= 1;\n        this.PC = this.stack[this.SP];\n        break;\n      // 0NNN - no idea what should happens, make it no-op for now\n      default:\n        break;\n    }\n  }\n\n  opCodeFamily_0x1(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // 1NNN - Jump to address NNN\n    this.PC = nnn;\n  }\n\n  opCodeFamily_0x2(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // 2NNN - Execute subroutine starting at address NNN\n    this.stack[this.SP] = this.PC;\n    this.SP += 1;\n    this.PC = nnn;\n  }\n\n  opCodeFamily_0x3(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // 3XNN - Skip the following instruction if the value of register VX equals NN\n    if (this.V[x] === nn) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0x4(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // 4XNN - Skip the following instruction if the value of register VX is not equal to NN\n    if (this.V[x] !== nn) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0x5(opCode) {\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    const n = opCode_n(opCode);\n    if (n !== 0x0) this.throwInvalidOpCode(opCode);\n\n    // 5XY0 - Skip the following instruction if the value of register VX is equal to the value of register VY\n    if (this.V[x] === this.V[y]) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0x6(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n\n    // 6XNN - Store number NN in register VX\n    this.V[x] = nn;\n  }\n\n  opCodeFamily_0x7(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // 7XNN - Add the value NN to register VX\n    this.V[x] = (this.V[x] + nn) & 0xff;\n  }\n\n  opCodeFamily_0x8(opCode) {\n    const n = opCode_n(opCode);\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    switch (n) {\n      // 8XY0 - Store the value of register VY in register VX\n      case 0x0:\n        this.V[x] = this.V[y];\n        break;\n      // 8XY1 - Set VX to VX OR VY\n      case 0x1:\n        this.V[x] = this.V[x] | this.V[y];\n        break;\n      // 8XY2 - Set VX to VX AND VY\n      case 0x2:\n        this.V[x] = this.V[x] & this.V[y];\n        break;\n      // 8XY3 - Set VX to VX XOR VY\n      case 0x3:\n        this.V[x] = this.V[x] ^ this.V[y];\n        break;\n      // 8XY4 - Add the value of register VY to register VX\n      //      - Set VF to 01 if a carry occurs\n      //      - Set VF to 00 if a carry does not occur\n      case 0x4:\n        const sum = this.V[x] + this.V[y];\n        this.V[0xf] = sum > 0xff;\n        this.V[x] = sum & 0xff;\n        break;\n      // 8XY5 - Subtract the value of register VY from register VX\n      //      - Set VF to 00 if a borrow occurs\n      //      - Set VF to 01 if a borrow does not occur\n      case 0x5:\n        const xMinusY = this.V[x] - this.V[y];\n        this.V[0xf] = this.V[x] >= this.V[y];\n        this.V[x] = xMinusY & 0xff;\n        break;\n      // 8XY6 - Store the value of register VY shifted right one bit in register VX\n      //      - Set register VF to the least significant bit prior to the shift\n      // Beware that this will also change the value of VY, see Mastering Chip8.\n      case 0x6:\n        this.V[0xf] = this.V[y] & 0b00000001;\n        this.V[x] = this.V[y] = this.V[y] >> 1;\n        break;\n      // 8XY7 - Set register VX to the value of VY minus VX\n      //      - Set VF to 00 if a borrow occurs\n      //      - Set VF to 01 if a borrow does not occur\n      case 0x7:\n        const yMinusX = this.V[y] - this.V[x];\n        this.V[0xf] = this.V[y] >= this.V[x];\n        this.V[x] = yMinusX & 0xff;\n        break;\n      // 8XYE - Store the value of register VY shifted left one bit in register VX\n      //      - Set register VF to the most significant bit prior to the shift\n      // Beware that this will also change the value of VY, see Mastering Chip8.\n      case 0xe:\n        this.V[0xf] = (this.V[y] & 0b10000000) >> 7;\n        this.V[x] = this.V[y] = this.V[y] << 1;\n        break;\n      default:\n        this.throwInvalidOpCode(opCode);\n        return;\n    }\n  }\n\n  opCodeFamily_0x9(opCode) {\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    const n = opCode_n(opCode);\n\n    if (n !== 0) this.throwInvalidOpCode(opCode);\n    // 9XY0 - Skip the following instruction if the value of register VX is not equal to the value of register VY\n    if (this.V[x] !== this.V[y]) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0xA(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // ANNN - Store memory address NNN in register I\n    this.I = nnn;\n  }\n\n  opCodeFamily_0xB(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // BNNN - Jump to address NNN + V0\n    this.PC = nnn + this.V[0];\n  }\n\n  opCodeFamily_0xC(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // CXNN - Set VX to a random number with a mask of NN\n    this.V[x] = (Math.random() * 256) & nn;\n  }\n\n  opCodeFamily_0xD(opCode) {\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    const n = opCode_n(opCode);\n    // DXYN - Draw a sprite at position VX, VY with N bytes of sprite data starting at the address stored in I\n    //      - Set VF to 01 if any set pixels are changed to unset, and 00 otherwise\n    this.shouldDraw = true;\n    this.V[0xf] = 0;\n    for (let row = 0; row < n; row++) {\n      const spriteRow = this.memory[this.I + row];\n\n      for (let bitIndex = 0; bitIndex < 8; bitIndex++) {\n        const bit = spriteRow & (0b10000000 >> bitIndex);\n\n        if (!bit) continue;\n\n        const targetX = (this.V[x] + bitIndex) % 64; // modulus to make it wrap to screen\n        const targetY = (this.V[y] + row) % 32;\n        const displayPosition = targetX + targetY * 64; // Transform 2D to 1D -> i = x + width*y;\n\n        // If the display will be unset, set VF\n        if (this.display[displayPosition] !== 0) {\n          this.V[0xf] = 0x1;\n        }\n\n        this.display[displayPosition] ^= 1;\n      }\n    }\n  }\n\n  opCodeFamily_0xE(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n\n    switch (nn) {\n      // EX9E - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is pressed\n      case 0x9e:\n        const keyPressed = this.V[x];\n        if (this.keys[keyPressed]) {\n          this.PC += 2;\n        }\n        break;\n      // EXA1 - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is not pressed\n      case 0xa1:\n        const keyNotPresseed = this.V[x];\n        if (!this.keys[keyNotPresseed]) {\n          this.PC += 2;\n        }\n        break;\n      default:\n        this.throwInvalidOpCode(opCode);\n        return;\n    }\n  }\n\n  opCodeFamily_0xF(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n\n    switch (nn) {\n      // FX07 - Store the current value of the delay timer in register VX\n      case 0x07:\n        this.V[x] = this.DT;\n        break;\n      // FX0A\t- Wait for a keypress and store the result in register VX\n      case 0x0a:\n        this.waitingKey = true;\n        this.waitingKeyTarget = x;\n        break;\n      // FX15 - Set the delay timer to the value of register VX\n      case 0x15:\n        this.DT = this.V[x];\n        break;\n      // FX18 - Set the sound timer to the value of register VX\n      case 0x18:\n        this.ST = this.V[x];\n        break;\n      // FX1E - Add the value stored in register VX to register I\n      case 0x1e:\n        this.I = (this.I + this.V[x]) & 0xffff;\n        break;\n      // FX29 - Set I to the memory address of the sprite data corresponding to the hexadecimal digit stored in register VX\n      case 0x29:\n        this.I = (this.V[x] & 0xf) * 5;\n        break;\n      // FX33 - Store the binary-coded decimal equivalent of the value stored in register VX at addresses I, I+1, and I+2\n      case 0x33:\n        this.memory[this.I] = Math.floor(this.V[x] / 100) % 10;\n        this.memory[this.I + 1] = Math.floor(this.V[x] / 10) % 10;\n        this.memory[this.I + 2] = this.V[x] % 10;\n        break;\n      // FX55 - Store the values of registers V0 to VX inclusive in memory starting at address I\n      //      - I is set to I + X + 1 after operation\n      case 0x55:\n        for (let i = 0; i <= x; i++) {\n          this.memory[this.I] = this.V[i];\n          this.I = (this.I + 1) & 0xffff;\n        }\n        break;\n      // FX65 - Fill registers V0 to VX inclusive with the values stored in memory starting at address I\n      //      - I is set to I + X + 1 after operation\n      case 0x65:\n        for (let i = 0; i <= x; i++) {\n          this.V[i] = this.memory[this.I];\n          this.I = (this.I + 1) & 0xffff;\n        }\n        break;\n      default:\n        this.throwInvalidOpCode(opCode);\n        return;\n    }\n  }\n}\n\nexport default Chip8;\n","import React from 'react';\nimport './Screen.css';\n\nclass Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.containerRef = React.createRef();\n    this.canvasRef = React.createRef();\n  }\n\n  /**\n   * Calculates the new size of the canvas.\n   *\n   * The canvas must be the biggest rectangle that\n   * fits the container while mantain the aspect ratio\n   */\n  resizeCanvas() {\n    const containerWidth = this.containerRef.current.offsetWidth,\n      containerHeight = this.containerRef.current.offsetHeight;\n\n    const scale = Math.floor(\n      Math.min(containerWidth / 64, containerHeight / 32)\n    );\n    this.canvasWidth = this.canvasRef.current.width = 64 * scale;\n    this.canvasHeight = this.canvasRef.current.height = 32 * scale;\n  }\n\n  /**\n   * Draw the display data on the Canvas element\n   */\n  draw() {\n    const computedStyle = getComputedStyle(document.documentElement);\n    this.drawColor = computedStyle.getPropertyValue('--main-color');\n    this.shadowColor = `rgba(${computedStyle.getPropertyValue(\n      '--main-color-rgb'\n    )}, ${Math.random() * 0.4})`;\n    this.backgroundColor = computedStyle.getPropertyValue('--main-bg-color');\n    this.shadowBlur = Math.random() * 20;\n\n    // Clear the screen\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    const pixelSize = this.canvasHeight / 32;\n\n    this.ctx.fillStyle = this.drawColor;\n    const displayData = this.props.displayData;\n    for (let i = 0; i < displayData.length; i++) {\n      const y = Math.floor(i / 64);\n      const x = i % 64;\n      if (displayData[i] !== 0) {\n        const scaledX = x * pixelSize,\n          scaledY = y * pixelSize;\n        this.ctx.shadowBlur = this.shadowBlur;\n        this.ctx.shadowColor = this.shadowColor;\n        this.ctx.fillRect(scaledX, scaledY, pixelSize, pixelSize);\n      }\n    }\n    this.requestFrameId = window.requestAnimationFrame(this.draw.bind(this));\n  }\n\n  componentDidMount() {\n    this.ctx = this.canvasRef.current.getContext('2d');\n    this.canvasWidth = this.canvasRef.current.width;\n    this.canvasHeight = this.canvasRef.current.height;\n    this.resizeCanvas();\n    this.requestFrameId = window.requestAnimationFrame(this.draw.bind(this));\n    window.addEventListener('resize', this.resizeCanvas.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.requestFrameId);\n    window.removeEventListener('resize', this.resizeCanvas.bind(this));\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    return (\n      <div ref={this.containerRef} className=\"ScreenContainer\">\n        <canvas ref={this.canvasRef} className=\"ScreenCanvas\" />\n      </div>\n    );\n  }\n}\n\nScreen.defaultProps = {\n  displayData: new Array(64 * 32).fill(0)\n};\n\nexport default Screen;\n","import Screen from './Screen';\n\nexport default Screen;\n","const numberToPaddedHex = (number, bytes) => {\n  if (bytes === undefined) bytes = 1;\n  return number\n    .toString(16)\n    .padStart(2 * bytes, '0')\n    .toUpperCase();\n};\n\nexport { numberToPaddedHex };\n","import React from 'react';\nimport './Word.css';\nimport { numberToPaddedHex } from '../util';\n\nconst Word = props => (\n  <li className={'Word ' + props.className}>\n    <label className=\"Label\" data-testid=\"label\">\n      {props.label}\n    </label>\n    {props.old !== undefined ? (\n      <span className=\"Old\" data-testid=\"old\">\n        {numberToPaddedHex(props.old, props.bytes)}\n      </span>\n    ) : null}\n    <span className=\"Current\" data-testid=\"current\">\n      {numberToPaddedHex(props.current, props.bytes)}\n    </span>\n  </li>\n);\n\nWord.defaultProps = {\n  current: 0,\n  bytes: 1\n};\n\nexport default React.memo(Word);\n","import Word from './Word';\n\nexport default Word;\n","import React from 'react';\nimport Word from '../Word';\nimport './VRegisters.css';\n\nconst VRegisters = props => {\n  return (\n    <section className=\"VRegisters\">\n      <h1 data-testid=\"title\">V Registers</h1>\n      <ul className=\"RegistersList\" data-testid=\"registers-list\">\n        {Array.from(props.current).map(function(current, index) {\n          const old = props.old[index];\n          return (\n            <Word\n              key={index}\n              label={`V${index.toString(16).toUpperCase()}`}\n              old={old}\n              current={current}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nVRegisters.defaultProps = {\n  current: [],\n  old: []\n};\n\nexport default VRegisters;\n","import VRegisters from './VRegisters';\n\nexport default VRegisters;\n","import React from 'react';\nimport Word from '../Word';\nimport './Stack.css';\n\nconst Stack = ({ old, current }) => {\n  return (\n    <section id=\"stack\" className=\"Stack\">\n      <h1 data-testid=\"title\">Stack</h1>\n      <Word\n        label=\"SP\"\n        old={old.SP}\n        current={current.SP}\n        bytes={1}\n        data-testid=\"sp\"\n      />\n      <ul className=\"StackList\" data-testid=\"stack-list\">\n        {Array.from(current.stack).map(function(currentStack, index) {\n          const oldStack = old.stack[index];\n          return (\n            <Word\n              key={index}\n              label={`SP${index.toString(16).toUpperCase()}`}\n              bytes={2}\n              old={oldStack}\n              current={currentStack}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nStack.defaultProps = {\n  old: {\n    SP: 0,\n    stack: []\n  },\n  current: {\n    SP: 0,\n    stack: []\n  }\n};\n\nexport default Stack;\n","import Stack from './Stack';\n\nexport default Stack;\n","import React from 'react';\nimport Word from '../Word';\nimport './Debug.css';\nimport { numberToPaddedHex } from '../util';\n\nconst Debug = ({ breakpoint, old, current, onChange }) => {\n  return (\n    <section className=\"Debug\">\n      <h1 data-testid=\"title\">Debug</h1>\n      <div className=\"Breakpoint\">\n        <label className=\"BreakpointLabel\" htmlFor=\"breakpoint\">\n          Breakpoint\n        </label>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          value={breakpoint}\n          className=\"BreakpointInput\"\n          id=\"breakpoint\"\n        />\n      </div>\n      <ul className=\"MemoryList\" data-testid=\"memory-list\">\n        <Word label=\"PC \" old={old.PC} current={current.PC} bytes={2} />\n        {Array.from(current.memorySlice)\n          .filter((element, index) => {\n            return index % 2 !== 0;\n          })\n          .map((currentMemory, index) => {\n            const memoryAddr = index * 2 + current.PC;\n            const wordValue =\n              (current.memorySlice[index * 2] << 8) |\n              current.memorySlice[index * 2 + 1];\n\n            let breakpointMarker;\n            if (memoryAddr === Number.parseInt(breakpoint, 16)) {\n              breakpointMarker = 'BreakpointMarker';\n            }\n            return (\n              <Word\n                key={memoryAddr}\n                label={numberToPaddedHex(memoryAddr, 2)}\n                current={wordValue}\n                className={breakpointMarker}\n                bytes={2}\n              />\n            );\n          })}\n      </ul>\n    </section>\n  );\n};\n\nDebug.defaultProps = {\n  breakpoint: 0,\n  old: { PC: 0, memorySlice: [] },\n  current: { PC: 0, memorySlice: [] }\n};\n\nexport default Debug;\n","import Debug from './Debug';\r\n\r\nexport default Debug;\r\n","import React from 'react';\nimport Word from '../Word';\nimport './OtherRegisters.css';\n\nconst OtherRegisters = ({ old, current }) => {\n  return (\n    <section className=\"OtherRegisters\">\n      <h1 data-testid=\"title\">Other Registers</h1>\n      <ul className=\"OtherRegistersList\">\n        <Word label=\"I\" old={old.I} current={current.I} bytes={2} />\n        <Word label=\"DT\" old={old.DT} current={current.DT} bytes={1} />\n        <Word label=\"ST\" old={old.ST} current={current.ST} bytes={1} />\n      </ul>\n    </section>\n  );\n};\n\nOtherRegisters.defaultProps = {\n  old: { I: 0, DT: 0, ST: 0 },\n  current: { I: 0, DT: 0, ST: 0 }\n};\n\nexport default OtherRegisters;\n","import OtherRegisters from './OtherRegisters';\n\nexport default OtherRegisters;\n","import Button from './Button';\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport './Button.css';\n\nconst Button = props => (\n  <div\n    role=\"button\"\n    aria-label={props.children}\n    className=\"Button\"\n    onClick={props.onClick}\n    onMouseUp={props.onMouseUp}\n    onMouseDown={props.onMouseDown}\n    tabIndex=\"0\"\n  >\n    {props.children}\n  </div>\n);\n\nexport default Button;\n","import React from 'react';\nimport './SelectROM.css';\nimport Button from '../Button';\n\nconst PlayButton = props => {\n  const label = props.playing ? 'Reset' : 'Start';\n  return <Button onClick={props.onClick}>{label}</Button>;\n};\n\nconst RomList = props => {\n  const options = props.roms.map((rom, index) => {\n    return (\n      <option className=\"RomListOption\" key={index} value={rom.value}>\n        {rom.label}\n      </option>\n    );\n  });\n  return (\n    <select className=\"RomList\" onChange={props.onChange}>\n      {options}\n    </select>\n  );\n};\n\nclass SelectROM extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.state = {\n      playing: false,\n      rom: 'Airplane.ch8',\n      roms: [\n        { value: 'Airplane.ch8', label: 'Airplane' },\n        { value: 'LunarLander.ch8', label: 'Lunar Lander' },\n        { value: 'Pong.ch8', label: 'Pong' },\n        { value: 'Maze.ch8', label: 'Maze' }\n      ]\n    };\n  }\n\n  onPlayClick = async () => {\n    this.setState({\n      playing: true\n    });\n    const selectedRom = this.state.roms.find(x => x.value === this.state.rom);\n\n    if (selectedRom.rom) {\n      this.props.onPlay(selectedRom.rom);\n      return;\n    } else {\n      const response = await fetch('./' + selectedRom.value);\n      const arrayBuffer = await response.arrayBuffer();\n      const rom = new Uint8Array(arrayBuffer);\n      this.props.onPlay(rom);\n    }\n  };\n\n  onLoadRom = () => {\n    this.inputRef.current.click();\n  };\n\n  onRomSelectChange = evt => {\n    this.setState({\n      rom: evt.target.value\n    });\n  };\n\n  onFileChange = evt => {\n    evt.preventDefault();\n\n    const file = evt.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n\n    reader.onload = event => {\n      const arrayBufferNew = event.target.result;\n      this.setState({\n        roms: [\n          ...this.state.roms,\n          {\n            label: file.name,\n            value: file.name,\n            rom: new Uint8Array(arrayBufferNew)\n          }\n        ]\n      });\n\n      this.inputRef.current.blur();\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  render() {\n    return (\n      <div className=\"SelectROM\">\n        <input\n          ref={this.inputRef}\n          type=\"file\"\n          onChange={this.onFileChange}\n          className=\"SelectROMInput\"\n        />\n        <RomList\n          roms={this.state.roms}\n          onChange={this.onRomSelectChange}\n        ></RomList>\n        <PlayButton\n          playing={this.state.playing}\n          onClick={this.onPlayClick}\n        ></PlayButton>\n        <span>or</span>\n        <Button onClick={this.onLoadRom}>Upload ROM</Button>\n      </div>\n    );\n  }\n}\n\nexport default SelectROM;\n","import SelectROM from './SelectROM';\n\nexport default SelectROM;\n","import React, { useEffect } from 'react';\nimport './Keypad.css';\n\nimport Button from '../Button';\n\n// 1\t2\t3\tC\n// 4\t5\t6\tD\n// 7\t8\t9\tE\n// A\t0\tB\tF\n// prettier-ignore\nconst keyMap = {\n  '1': 0x1, '2': 0x2, '3': 0x3, '4': 0xc,\n  q: 0x4, w: 0x5, e: 0x6, r: 0xd,\n  a: 0x7, s: 0x8, d: 0x9, f: 0xe,\n  z: 0xa, x: 0x0, c: 0xb, v: 0xf\n};\n\n// prettier-ignore\nconst keys = [ 0x1, 0x2, 0x3, 0xc, 0x4, 0x5, 0x6, 0xd, 0x7, 0x8, 0x9, 0xe, 0xa, 0x0, 0xb, 0xf ];\n\nconst Keypad = props => {\n  const handleKeyBoardevent = (key, pressed) => {\n    const keyFromEvent = keyMap[key];\n\n    keyStateUpdate(keyFromEvent, pressed);\n  };\n\n  const keyStateUpdate = (key, pressed) => {\n    if (pressed) {\n      props.onKeydown(key);\n    } else {\n      props.onKeyup(key);\n    }\n  };\n\n  const onKeydown = evt => handleKeyBoardevent(evt.key, true);\n  const onKeyup = evt => handleKeyBoardevent(evt.key, false);\n  const onMouseDown = key => keyStateUpdate(key, true);\n  const onMouseUp = key => keyStateUpdate(key, false);\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeydown);\n    document.addEventListener('keyup', onKeyup);\n\n    return () => {\n      document.removeEventListener('keydown', onKeydown);\n      document.removeEventListener('keyup', onKeyup);\n    };\n  });\n\n  return (\n    <section className=\"Keypad\">\n      <h1>Keypad</h1>\n      <div className=\"Keys\">\n        {keys.map(key => (\n          <Button\n            key={key}\n            onMouseUp={() => onMouseUp(key)}\n            onMouseDown={() => onMouseDown(key)}\n          >\n            {key.toString(16).toUpperCase()}\n          </Button>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default Keypad;\n","import Keypad from './Keypad';\n\nexport default Keypad;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport './App.css';\n\nimport Chip8 from '../../interpreter/chip8';\nimport Screen from '../Screen';\nimport VRegisters from '../VRegisters';\nimport Stack from '../Stack';\nimport Debug from '../Debug';\nimport OtherRegisters from '../OtherRegisters';\nimport SelectROM from '../SelectROM';\nimport Keypad from '../Keypad';\nimport Button from '../Button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakpointHit: false,\n      displayData: new Array(0).fill(0),\n      otherRegisters: {\n        old: { I: 0, DT: 0, ST: 0, PC: 0 },\n        current: { I: 0, DT: 0, ST: 0, PC: 0 }\n      },\n      V: {\n        old: new Uint8Array(16).fill(0),\n        current: new Uint8Array(16).fill(0)\n      },\n      stack: {\n        old: { SP: 0, stack: new Uint16Array(16) },\n        current: { SP: 0, stack: new Uint16Array(16) }\n      },\n      debug: {\n        breakpoint: 0,\n        old: { PC: 0x200, memorySlice: new Uint8Array(14) },\n        current: { PC: 0x200, memorySlice: new Uint8Array(14) }\n      }\n    };\n    this.myRef = React.createRef();\n    this.intervalHandle = null;\n    this.cyclesPerTick = 10;\n    this.chip8 = new Chip8();\n  }\n\n  stopClock() {\n    if (this.intervalHandle) {\n      clearInterval(this.intervalHandle);\n    }\n  }\n\n  startClock() {\n    // Start our CPU at 60Hz\n    const frequency = 1000 / 60;\n    this.intervalHandle = setInterval(this.cycle, frequency);\n  }\n\n  onPlay = rom => {\n    this.stopClock();\n\n    this.chip8.reset();\n    // Load the ROM\n    let addr = 0x200;\n    rom.forEach(byte => {\n      this.chip8.writeByte(addr, byte);\n      addr++;\n    });\n\n    this.startClock();\n  };\n\n  cycle = () => {\n    let remainingCycles = this.cyclesPerTick;\n    while (remainingCycles > 0) {\n      // When hitting the breakpoint stop\n      // the clock and make sure UI state is updated\n      if (this.chip8.PC === Number.parseInt(this.state.debug.breakpoint, 16)) {\n        this.stopClock();\n        this.updateChip8State(true);\n        return;\n      }\n      this.chip8.cycle();\n      remainingCycles--;\n    }\n\n    this.chip8.soundTimerTick();\n    this.chip8.delayTimerTick();\n\n    this.updateChip8State();\n  };\n\n  updateChip8State(onBreakpoint) {\n    setTimeout(() => {\n      this.setState({\n        breakpointHit: onBreakpoint || false,\n        displayData: this.chip8.display,\n        otherRegisters: {\n          old: this.state.otherRegisters.current,\n          current: { I: this.chip8.I, DT: this.chip8.DT, ST: this.chip8.ST }\n        },\n        V: { old: this.state.V.current, current: this.chip8.V },\n        stack: {\n          old: this.state.stack.current,\n          current: { SP: this.chip8.SP, stack: this.chip8.stack }\n        },\n        debug: {\n          breakpoint: this.state.debug.breakpoint,\n          old: this.state.debug.current,\n          current: {\n            PC: this.chip8.PC,\n            memorySlice: this.memorySlice(this.chip8.PC, this.chip8.memory)\n          }\n        }\n      });\n    }, 0);\n  }\n\n  memorySlice(pc, memory) {\n    return memory.slice(pc, pc + 14);\n  }\n\n  onKeydown = key => {\n    this.chip8.pressKey(key);\n  };\n\n  onKeyup = key => {\n    this.chip8.releaseKey(key);\n  };\n\n  onContinue = () => {\n    this.startClock();\n  };\n\n  onStep = () => {\n    this.chip8.cycle();\n    this.chip8.soundTimerTick();\n    this.chip8.delayTimerTick();\n    this.updateChip8State(true);\n  };\n\n  onBreakpointChange = evt => {\n    this.setState({\n      debug: {\n        ...this.state.debug,\n        breakpoint: evt.target.value\n      }\n    });\n  };\n\n  renderControls() {\n    if (this.state.breakpointHit) {\n      return (\n        <div className=\"DebugControls\">\n          <Button onClick={this.onContinue}>Continue</Button>\n          <Button onClick={this.onStep}>Step</Button>\n        </div>\n      );\n    } else {\n      return <SelectROM onPlay={this.onPlay} />;\n    }\n  }\n\n  render() {\n    const otherRegisters = this.state.otherRegisters;\n    const V = this.state.V;\n    const stack = this.state.stack;\n\n    const debug = this.state.debug;\n    const breakpoint = this.state.debug.breakpoint;\n\n    return (\n      <div className=\"App\">\n        <header className=\"Header\">\n          <h1>Chip-8</h1>\n          {this.renderControls()}\n        </header>\n        <main className=\"DisplayView\">\n          <Screen displayData={this.state.displayData} />\n        </main>\n        <footer className=\"MemoryView\">\n          <Keypad onKeydown={this.onKeydown} onKeyup={this.onKeyup} />\n          <OtherRegisters\n            old={otherRegisters.old}\n            current={otherRegisters.current}\n          />\n          <VRegisters old={V.old} current={V.current} />\n          <Stack old={stack.old} current={stack.current} />\n          <Debug\n            breakpoint={breakpoint}\n            old={debug.old}\n            current={debug.current}\n            onChange={this.onBreakpointChange}\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}