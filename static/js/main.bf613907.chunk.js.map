{"version":3,"sources":["interpreter/util.js","interpreter/font-sprites.js","interpreter/chip8.js","components/Screen/Screen.js","components/Screen/index.js","components/util.js","components/Word/Word.js","components/Word/index.js","components/VRegisters/VRegisters.js","components/VRegisters/index.js","components/Stack/Stack.js","components/Stack/index.js","components/Debug/Debug.js","components/Debug/index.js","components/OtherRegisters/OtherRegisters.js","components/OtherRegisters/index.js","components/Button/index.js","components/Button/Button.js","components/SelectROM/SelectROM.js","components/SelectROM/index.js","components/Keypad/Keypad.js","components/Keypad/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["opCode_nnn","opcode","opCode_nn","opCode_n","opCode_x","opCode_y","fontSprites","Chip8","options","Object","classCallCheck","this","MEM_SIZE","memSize","PC_START","pcStart","STACK_SIZE","stackSize","DISPLAY_SIZE","displaySize","screen","draw","reset","_this","memory","Uint8Array","forEach","element","index","V","I","DT","ST","PC","SP","stack","Uint16Array","display","Array","fill","keys","waitingKey","waitingKeyTarget","key","console","log","addr","data","writeByte","executeOpCode","shouldDraw","opCode","Error","concat","toString","opCodeFamily_0x0","opCodeFamily_0x1","opCodeFamily_0x2","opCodeFamily_0x3","opCodeFamily_0x4","opCodeFamily_0x5","opCodeFamily_0x6","opCodeFamily_0x7","opCodeFamily_0x8","opCodeFamily_0x9","opCodeFamily_0xA","opCodeFamily_0xB","opCodeFamily_0xC","opCodeFamily_0xD","opCodeFamily_0xE","opCodeFamily_0xF","throwInvalidOpCode","nnn","x","nn","y","n","sum","xMinusY","yMinusX","Math","random","row","spriteRow","bitIndex","displayPosition","keyPressed","keyNotPresseed","floor","i","Screen","props","possibleConstructorReturn","getPrototypeOf","call","containerRef","React","createRef","canvasRef","containerWidth","current","offsetWidth","containerHeight","offsetHeight","scale","min","canvasWidth","width","canvasHeight","height","computedStyle","getComputedStyle","document","documentElement","drawColor","getPropertyValue","shadowColor","backgroundColor","shadowBlur","ctx","fillStyle","fillRect","pixelSize","displayData","length","scaledX","scaledY","requestFrameId","window","requestAnimationFrame","bind","getContext","resizeCanvas","addEventListener","cancelAnimationFrame","removeEventListener","react_default","a","createElement","ref","className","Component","defaultProps","numberToPaddedHex","number","bytes","undefined","padStart","toUpperCase","Word","data-testid","label","old","memo","VRegisters","from","map","components_Word","Stack","_ref","id","currentStack","oldStack","Debug","breakpoint","onChange","htmlFor","type","value","memorySlice","filter","currentMemory","breakpointMarker","memoryAddr","wordValue","Number","parseInt","OtherRegisters","Button","role","aria-label","children","onClick","onMouseUp","onMouseDown","tabIndex","PlayButton","playing","components_Button","RomList","roms","rom","SelectROM","onPlayClick","asyncToGenerator","regenerator_default","mark","_callee","selectedRom","response","arrayBuffer","wrap","_context","prev","next","setState","state","find","onPlay","abrupt","fetch","sent","stop","onLoadRom","inputRef","click","onRomSelectChange","evt","target","onFileChange","preventDefault","file","files","reader","FileReader","onload","event","arrayBufferNew","result","toConsumableArray","name","blur","readAsArrayBuffer","SelectROM_RomList","SelectROM_PlayButton","keyMap","1","2","3","4","q","w","e","r","s","d","f","z","c","v","Keypad","handleKeyBoardevent","pressed","keyStateUpdate","onKeydown","onKeyup","useEffect","App","stopClock","chip8","byte","startClock","cycle","remainingCycles","cyclesPerTick","debug","updateChip8State","soundTimerTick","delayTimerTick","pressKey","releaseKey","onContinue","onStep","onBreakpointChange","objectSpread","breakpointHit","otherRegisters","myRef","intervalHandle","clearInterval","setInterval","onBreakpoint","_this2","setTimeout","pc","slice","components_SelectROM","renderControls","components_Screen","components_Keypad","components_OtherRegisters","components_VRegisters","components_Stack","components_Debug","Boolean","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf613907.chunk.js","sourcesContent":["export function opCode_nnn(opcode) {\n  return opcode & 0x0fff;\n}\n\nexport function opCode_nn(opcode) {\n  return opcode & 0x00ff;\n}\n\nexport function opCode_n(opcode) {\n  return opcode & 0x000f;\n}\n\nexport function opCode_x(opcode) {\n  return (opcode & 0x0f00) >> 8;\n}\n\nexport function opCode_y(opcode) {\n  return (opcode & 0x00f0) >> 4;\n}\n","// prettier-ignore\nconst fontSprites = [\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80  // F\n];\n\nexport default fontSprites;\n","import { opCode_nnn, opCode_nn, opCode_n, opCode_x, opCode_y } from './util';\nimport fontSprites from './font-sprites';\n\n/**\n * CHIP-8 Interpreter\n *\n * References:\n * - http://devernay.free.fr/hacks/chip8/C8TECH10.HTM - by Thomas P. Greene\n * - http://mattmik.com/files/chip8/mastering/chip8.html - By Matthew Mikolay\n */\nclass Chip8 {\n  /**\n   * @typedef {object} Chip8Options\n   * @property {number} [memSize=4096] - The interpreter memory map size\n   * @property {number} [pcStart=0x200] - The start position for the Program Counter\n   * @property {number} [stackSize=16] - Interpreter stack size\n   * @property {number} [displaySize=64*32] - Display size\n   */\n  /**\n   * Constructs the CHIP-8 processor\n   * @param {Chip8Options} [options] - The {@link Chip8Options} to be used by the interpreter\n   */\n  constructor(options) {\n    options = options || {};\n    this.MEM_SIZE = options.memSize || 4096;\n    this.PC_START = options.pcStart || 0x200;\n    this.STACK_SIZE = options.stackSize || 16;\n    this.DISPLAY_SIZE = options.displaySize || 64 * 32;\n    this.screen = { draw: () => {} };\n    this.reset();\n  }\n\n  /**\n   * Resets the CHIP-8 back to its default state\n   */\n  reset() {\n    this.memory = new Uint8Array(this.MEM_SIZE);\n    fontSprites.forEach((element, index) => {\n      this.memory[index] = element;\n    });\n    this.V = new Uint8Array(16);\n    this.I = 0;\n    this.DT = 0;\n    this.ST = 0;\n    this.PC = this.PC_START;\n    this.SP = 0;\n    this.stack = new Uint16Array(this.STACK_SIZE);\n    this.display = new Array(this.DISPLAY_SIZE).fill(0);\n    this.keys = {};\n    this.waitingKey = false;\n    this.waitingKeyTarget = -1;\n    this.screen.draw(this.display);\n  }\n\n  /**\n   * Set the key as pressed\n   * @param {number} key 0x0 up to 0xF\n   */\n  pressKey(key) {\n    this.keys[key & 0xf] = true;\n    if (this.waitingKey) {\n      this.V[this.waitingKeyTarget] = key;\n      this.waitingKey = false;\n    }\n  }\n\n  /**\n   * Set the key as released\n   * @param {number} key 0x0 up to 0xF\n   */\n  releaseKey(key) {\n    this.keys[key & 0xf] = false;\n  }\n\n  /**\n   * Decreases the delay timer by 1\n   */\n  delayTimerTick() {\n    if (this.DT > 0) {\n      this.DT -= 1;\n    }\n  }\n\n  /**\n   * Decreases the sound timer by 1 and stop the beep\n   */\n  soundTimerTick() {\n    if (this.ST > 0) {\n      this.ST -= 1;\n    }\n\n    if (this.ST) {\n      console.log('Stop sound!');\n    }\n  }\n\n  /**\n   * Load 2 bytes of data at the specified address\n   * @param {number} addr - Data target\n   * @param {number} data - 2 bytes of data\n   * @returns {Chip8} - The chip8 itself\n   */\n  writeWord(addr, data) {\n    this.writeByte(addr, (data >> 8) & 0xff);\n    this.writeByte(addr + 1, data & 0xff);\n    return this;\n  }\n\n  /**\n   * Write a byte at the address\n   * @param {number} addr - Data target\n   * @param {number} data - byte\n   * @returns {Chip8} - The chip8 itself\n   */\n  writeByte(addr, data) {\n    this.memory[addr] = data;\n  }\n\n  /**\n   * Performs one emulation cycle\n   */\n  cycle() {\n    if (this.waitingKey) {\n      return;\n    }\n\n    const opcode = (this.memory[this.PC] << 8) | this.memory[this.PC + 1];\n\n    this.executeOpCode(opcode);\n\n    if (this.shouldDraw) {\n      this.shouldDraw = false;\n      this.screen.draw(this.display);\n    }\n  }\n\n  /**\n   * Throws a formatted exception for invalid op codes\n   * @param {number} opCode\n   */\n  throwInvalidOpCode(opCode) {\n    throw new Error(`Invalid instruction opCode=${opCode.toString(16)}`);\n  }\n\n  /**\n   *\n   * @param {number} opCode - Operation code to be executed\n   * @throws {Error} - if the opcode is not supported\n   */\n  executeOpCode(opCode) {\n    this.PC += 2;\n    const opFamily = (opCode & 0xf000) >> 12;\n\n    // We are using the nibble of the opcode as the\n    // Operation Code \"Family\".\n    // prettier-ignore\n    switch (opFamily) {\n      case 0x0: this.opCodeFamily_0x0(opCode); return;\n      case 0x1: this.opCodeFamily_0x1(opCode); return;\n      case 0x2: this.opCodeFamily_0x2(opCode); return;\n      case 0x3: this.opCodeFamily_0x3(opCode); return;\n      case 0x4: this.opCodeFamily_0x4(opCode); return;\n      case 0x5: this.opCodeFamily_0x5(opCode); return;\n      case 0x6: this.opCodeFamily_0x6(opCode); return;\n      case 0x7: this.opCodeFamily_0x7(opCode); return;\n      case 0x8: this.opCodeFamily_0x8(opCode); return;\n      case 0x9: this.opCodeFamily_0x9(opCode); return;\n      case 0xa: this.opCodeFamily_0xA(opCode); return;\n      case 0xb: this.opCodeFamily_0xB(opCode); return;\n      case 0xc: this.opCodeFamily_0xC(opCode); return;\n      case 0xd: this.opCodeFamily_0xD(opCode); return;\n      case 0xe: this.opCodeFamily_0xE(opCode); return;\n      case 0xf: this.opCodeFamily_0xF(opCode); return;\n      default: this.throwInvalidOpCode(opCode); return;\n    }\n  }\n\n  opCodeFamily_0x0(opCode) {\n    switch (opCode) {\n      // 00E0 - Clear the screen\n      case 0x00e0:\n        this.display.fill(0);\n        break;\n      // 00EE - Return from a subroutine\n      case 0x00ee:\n        this.SP -= 1;\n        this.PC = this.stack[this.SP];\n        break;\n      // 0NNN - no idea what should happens, make it no-op for now\n      default:\n        break;\n    }\n  }\n\n  opCodeFamily_0x1(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // 1NNN - Jump to address NNN\n    this.PC = nnn;\n  }\n\n  opCodeFamily_0x2(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // 2NNN - Execute subroutine starting at address NNN\n    this.stack[this.SP] = this.PC;\n    this.SP += 1;\n    this.PC = nnn;\n  }\n\n  opCodeFamily_0x3(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // 3XNN - Skip the following instruction if the value of register VX equals NN\n    if (this.V[x] === nn) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0x4(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // 4XNN - Skip the following instruction if the value of register VX is not equal to NN\n    if (this.V[x] !== nn) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0x5(opCode) {\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    const n = opCode_n(opCode);\n    if (n !== 0x0) this.throwInvalidOpCode(opCode);\n\n    // 5XY0 - Skip the following instruction if the value of register VX is equal to the value of register VY\n    if (this.V[x] === this.V[y]) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0x6(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n\n    // 6XNN - Store number NN in register VX\n    this.V[x] = nn;\n  }\n\n  opCodeFamily_0x7(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // 7XNN - Add the value NN to register VX\n    this.V[x] = (this.V[x] + nn) & 0xff;\n  }\n\n  opCodeFamily_0x8(opCode) {\n    const n = opCode_n(opCode);\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    switch (n) {\n      // 8XY0 - Store the value of register VY in register VX\n      case 0x0:\n        this.V[x] = this.V[y];\n        break;\n      // 8XY1 - Set VX to VX OR VY\n      case 0x1:\n        this.V[x] = this.V[x] | this.V[y];\n        break;\n      // 8XY2 - Set VX to VX AND VY\n      case 0x2:\n        this.V[x] = this.V[x] & this.V[y];\n        break;\n      // 8XY3 - Set VX to VX XOR VY\n      case 0x3:\n        this.V[x] = this.V[x] ^ this.V[y];\n        break;\n      // 8XY4 - Add the value of register VY to register VX\n      //      - Set VF to 01 if a carry occurs\n      //      - Set VF to 00 if a carry does not occur\n      case 0x4:\n        const sum = this.V[x] + this.V[y];\n        this.V[0xf] = sum > 0xff;\n        this.V[x] = sum & 0xff;\n        break;\n      // 8XY5 - Subtract the value of register VY from register VX\n      //      - Set VF to 00 if a borrow occurs\n      //      - Set VF to 01 if a borrow does not occur\n      case 0x5:\n        const xMinusY = this.V[x] - this.V[y];\n        this.V[0xf] = this.V[x] >= this.V[y];\n        this.V[x] = xMinusY & 0xff;\n        break;\n      // 8XY6 - Store the value of register VY shifted right one bit in register VX\n      //      - Set register VF to the least significant bit prior to the shift\n      // Beware that this will also change the value of VY, see Mastering Chip8.\n      case 0x6:\n        this.V[0xf] = this.V[y] & 0b00000001;\n        this.V[x] = this.V[y] = this.V[y] >> 1;\n        break;\n      // 8XY7 - Set register VX to the value of VY minus VX\n      //      - Set VF to 00 if a borrow occurs\n      //      - Set VF to 01 if a borrow does not occur\n      case 0x7:\n        const yMinusX = this.V[y] - this.V[x];\n        this.V[0xf] = this.V[y] >= this.V[x];\n        this.V[x] = yMinusX & 0xff;\n        break;\n      // 8XYE - Store the value of register VY shifted left one bit in register VX\n      //      - Set register VF to the most significant bit prior to the shift\n      // Beware that this will also change the value of VY, see Mastering Chip8.\n      case 0xe:\n        this.V[0xf] = (this.V[y] & 0b10000000) >> 7;\n        this.V[x] = this.V[y] = this.V[y] << 1;\n        break;\n      default:\n        this.throwInvalidOpCode(opCode);\n        return;\n    }\n  }\n\n  opCodeFamily_0x9(opCode) {\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    const n = opCode_n(opCode);\n\n    if (n !== 0) this.throwInvalidOpCode(opCode);\n    // 9XY0 - Skip the following instruction if the value of register VX is not equal to the value of register VY\n    if (this.V[x] !== this.V[y]) {\n      this.PC += 2;\n    }\n  }\n\n  opCodeFamily_0xA(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // ANNN - Store memory address NNN in register I\n    this.I = nnn;\n  }\n\n  opCodeFamily_0xB(opCode) {\n    const nnn = opCode_nnn(opCode);\n    // BNNN - Jump to address NNN + V0\n    this.PC = nnn + this.V[0];\n  }\n\n  opCodeFamily_0xC(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n    // CXNN - Set VX to a random number with a mask of NN\n    this.V[x] = (Math.random() * 256) & nn;\n  }\n\n  opCodeFamily_0xD(opCode) {\n    const x = opCode_x(opCode);\n    const y = opCode_y(opCode);\n    const n = opCode_n(opCode);\n    // DXYN - Draw a sprite at position VX, VY with N bytes of sprite data starting at the address stored in I\n    //      - Set VF to 01 if any set pixels are changed to unset, and 00 otherwise\n    this.shouldDraw = true;\n    this.V[0xf] = 0;\n    for (let row = 0; row < n; row++) {\n      const spriteRow = this.memory[this.I + row];\n\n      for (let bitIndex = 0; bitIndex < 8; bitIndex++) {\n        const bit = spriteRow & (0b10000000 >> bitIndex);\n\n        if (!bit) continue;\n\n        const targetX = (this.V[x] + bitIndex) % 64; // modulus to make it wrap to screen\n        const targetY = (this.V[y] + row) % 32;\n        const displayPosition = targetX + targetY * 64; // Transform 2D to 1D -> i = x + width*y;\n\n        // If the display will be unset, set VF\n        if (this.display[displayPosition] !== 0) {\n          this.V[0xf] = 0x1;\n        }\n\n        this.display[displayPosition] ^= 1;\n      }\n    }\n  }\n\n  opCodeFamily_0xE(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n\n    switch (nn) {\n      // EX9E - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is pressed\n      case 0x9e:\n        const keyPressed = this.V[x];\n        if (this.keys[keyPressed]) {\n          this.PC += 2;\n        }\n        break;\n      // EXA1 - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is not pressed\n      case 0xa1:\n        const keyNotPresseed = this.V[x];\n        if (!this.keys[keyNotPresseed]) {\n          this.PC += 2;\n        }\n        break;\n      default:\n        this.throwInvalidOpCode(opCode);\n        return;\n    }\n  }\n\n  opCodeFamily_0xF(opCode) {\n    const x = opCode_x(opCode);\n    const nn = opCode_nn(opCode);\n\n    switch (nn) {\n      // FX07 - Store the current value of the delay timer in register VX\n      case 0x07:\n        this.V[x] = this.DT;\n        break;\n      // FX0A\t- Wait for a keypress and store the result in register VX\n      case 0x0a:\n        this.waitingKey = true;\n        this.waitingKeyTarget = x;\n        break;\n      // FX15 - Set the delay timer to the value of register VX\n      case 0x15:\n        this.DT = this.V[x];\n        break;\n      // FX18 - Set the sound timer to the value of register VX\n      case 0x18:\n        this.ST = this.V[x];\n        break;\n      // FX1E - Add the value stored in register VX to register I\n      case 0x1e:\n        this.I = (this.I + this.V[x]) & 0xffff;\n        break;\n      // FX29 - Set I to the memory address of the sprite data corresponding to the hexadecimal digit stored in register VX\n      case 0x29:\n        this.I = (this.V[x] & 0xf) * 5;\n        break;\n      // FX33 - Store the binary-coded decimal equivalent of the value stored in register VX at addresses I, I+1, and I+2\n      case 0x33:\n        this.memory[this.I] = Math.floor(this.V[x] / 100) % 10;\n        this.memory[this.I + 1] = Math.floor(this.V[x] / 10) % 10;\n        this.memory[this.I + 2] = this.V[x] % 10;\n        break;\n      // FX55 - Store the values of registers V0 to VX inclusive in memory starting at address I\n      //      - I is set to I + X + 1 after operation\n      case 0x55:\n        for (let i = 0; i <= x; i++) {\n          this.memory[this.I] = this.V[i];\n          this.I = (this.I + 1) & 0xffff;\n        }\n        break;\n      // FX65 - Fill registers V0 to VX inclusive with the values stored in memory starting at address I\n      //      - I is set to I + X + 1 after operation\n      case 0x65:\n        for (let i = 0; i <= x; i++) {\n          this.V[i] = this.memory[this.I];\n          this.I = (this.I + 1) & 0xffff;\n        }\n        break;\n      default:\n        this.throwInvalidOpCode(opCode);\n        return;\n    }\n  }\n}\n\nexport default Chip8;\n","import React from 'react';\nimport './Screen.css';\n\nclass Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.containerRef = React.createRef();\n    this.canvasRef = React.createRef();\n  }\n\n  /**\n   * Calculates the new size of the canvas.\n   *\n   * The canvas must be the biggest rectangle that\n   * fits the container while mantain the aspect ratio\n   */\n  resizeCanvas() {\n    const containerWidth = this.containerRef.current.offsetWidth,\n      containerHeight = this.containerRef.current.offsetHeight;\n\n    const scale = Math.floor(\n      Math.min(containerWidth / 64, containerHeight / 32)\n    );\n    this.canvasWidth = this.canvasRef.current.width = 64 * scale;\n    this.canvasHeight = this.canvasRef.current.height = 32 * scale;\n  }\n\n  /**\n   * Draw the display data on the Canvas element\n   */\n  draw() {\n    const computedStyle = getComputedStyle(document.documentElement);\n    this.drawColor = computedStyle.getPropertyValue('--main-color');\n    this.shadowColor = `rgba(${computedStyle.getPropertyValue(\n      '--main-color-rgb'\n    )}, ${Math.random() * 0.4})`;\n    this.backgroundColor = computedStyle.getPropertyValue('--main-bg-color');\n    this.shadowBlur = Math.random() * 20;\n\n    // Clear the screen\n    this.ctx.fillStyle = this.backgroundColor;\n    this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n    const pixelSize = this.canvasHeight / 32;\n\n    this.ctx.fillStyle = this.drawColor;\n    const displayData = this.props.displayData;\n    for (let i = 0; i < displayData.length; i++) {\n      const y = Math.floor(i / 64);\n      const x = i % 64;\n      if (displayData[i] !== 0) {\n        const scaledX = x * pixelSize,\n          scaledY = y * pixelSize;\n        this.ctx.shadowBlur = this.shadowBlur;\n        this.ctx.shadowColor = this.shadowColor;\n        this.ctx.fillRect(scaledX, scaledY, pixelSize, pixelSize);\n      }\n    }\n    this.requestFrameId = window.requestAnimationFrame(this.draw.bind(this));\n  }\n\n  componentDidMount() {\n    this.ctx = this.canvasRef.current.getContext('2d');\n    this.canvasWidth = this.canvasRef.current.width;\n    this.canvasHeight = this.canvasRef.current.height;\n    this.resizeCanvas();\n    this.requestFrameId = window.requestAnimationFrame(this.draw.bind(this));\n    window.addEventListener('resize', this.resizeCanvas.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.requestFrameId);\n    window.removeEventListener('resize', this.resizeCanvas.bind(this));\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    return (\n      <div ref={this.containerRef} className=\"ScreenContainer\">\n        <canvas ref={this.canvasRef} className=\"ScreenCanvas\" />\n      </div>\n    );\n  }\n}\n\nScreen.defaultProps = {\n  displayData: new Array(64 * 32).fill(0)\n};\n\nexport default Screen;\n","import Screen from './Screen';\n\nexport default Screen;\n","const numberToPaddedHex = (number, bytes) => {\n  if (bytes === undefined) bytes = 1;\n  return number\n    .toString(16)\n    .padStart(2 * bytes, '0')\n    .toUpperCase();\n};\n\nexport { numberToPaddedHex };\n","import React from 'react';\nimport './Word.css';\nimport { numberToPaddedHex } from '../util';\n\nconst Word = props => (\n  <li className={'Word ' + props.className}>\n    <label className=\"Label\" data-testid=\"label\">\n      {props.label}\n    </label>\n    {props.old !== undefined ? (\n      <span className=\"Old\" data-testid=\"old\">\n        {numberToPaddedHex(props.old, props.bytes)}\n      </span>\n    ) : null}\n    <span className=\"Current\" data-testid=\"current\">\n      {numberToPaddedHex(props.current, props.bytes)}\n    </span>\n  </li>\n);\n\nWord.defaultProps = {\n  current: 0,\n  bytes: 1\n};\n\nexport default React.memo(Word);\n","import Word from './Word';\n\nexport default Word;\n","import React from 'react';\nimport Word from '../Word';\nimport './VRegisters.css';\n\nconst VRegisters = props => {\n  return (\n    <section className=\"VRegisters\">\n      <h1 data-testid=\"title\">V Registers</h1>\n      <ul className=\"RegistersList\" data-testid=\"registers-list\">\n        {Array.from(props.current).map(function(current, index) {\n          const old = props.old[index];\n          return (\n            <Word\n              key={index}\n              label={`V${index.toString(16).toUpperCase()}`}\n              old={old}\n              current={current}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nVRegisters.defaultProps = {\n  current: [],\n  old: []\n};\n\nexport default VRegisters;\n","import VRegisters from './VRegisters';\n\nexport default VRegisters;\n","import React from 'react';\nimport Word from '../Word';\nimport './Stack.css';\n\nconst Stack = ({ old, current }) => {\n  return (\n    <section id=\"stack\" className=\"Stack\">\n      <h1 data-testid=\"title\">Stack</h1>\n      <Word\n        label=\"SP\"\n        old={old.SP}\n        current={current.SP}\n        bytes={1}\n        data-testid=\"sp\"\n      />\n      <ul className=\"StackList\" data-testid=\"stack-list\">\n        {Array.from(current.stack).map(function(currentStack, index) {\n          const oldStack = old.stack[index];\n          return (\n            <Word\n              key={index}\n              label={`SP${index.toString(16).toUpperCase()}`}\n              bytes={2}\n              old={oldStack}\n              current={currentStack}\n            />\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nStack.defaultProps = {\n  old: {\n    SP: 0,\n    stack: []\n  },\n  current: {\n    SP: 0,\n    stack: []\n  }\n};\n\nexport default Stack;\n","import Stack from './Stack';\n\nexport default Stack;\n","import React from 'react';\nimport Word from '../Word';\nimport './Debug.css';\nimport { numberToPaddedHex } from '../util';\n\nconst Debug = ({ breakpoint, old, current, onChange }) => {\n  return (\n    <section className=\"Debug\">\n      <h1 data-testid=\"title\">Debug</h1>\n      <div className=\"Breakpoint\">\n        <label className=\"BreakpointLabel\" htmlFor=\"breakpoint\">\n          Breakpoint\n        </label>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          value={breakpoint}\n          className=\"BreakpointInput\"\n          id=\"breakpoint\"\n        />\n      </div>\n      <ul className=\"MemoryList\" data-testid=\"memory-list\">\n        <Word label=\"PC \" old={old.PC} current={current.PC} bytes={2} />\n        {Array.from(current.memorySlice)\n          .filter((element, index) => {\n            return index % 2 !== 0;\n          })\n          .map((currentMemory, index) => {\n            const memoryAddr = index * 2 + current.PC;\n            const wordValue =\n              (current.memorySlice[index * 2] << 8) |\n              current.memorySlice[index * 2 + 1];\n\n            let breakpointMarker;\n            if (memoryAddr === Number.parseInt(breakpoint, 16)) {\n              breakpointMarker = 'BreakpointMarker';\n            }\n            return (\n              <Word\n                key={memoryAddr}\n                label={numberToPaddedHex(memoryAddr, 2)}\n                current={wordValue}\n                className={breakpointMarker}\n                bytes={2}\n              />\n            );\n          })}\n      </ul>\n    </section>\n  );\n};\n\nDebug.defaultProps = {\n  breakpoint: 0,\n  old: { PC: 0, memorySlice: [] },\n  current: { PC: 0, memorySlice: [] }\n};\n\nexport default Debug;\n","import Debug from './Debug';\r\n\r\nexport default Debug;\r\n","import React from 'react';\nimport Word from '../Word';\nimport './OtherRegisters.css';\n\nconst OtherRegisters = ({ old, current }) => {\n  return (\n    <section className=\"OtherRegisters\">\n      <h1 data-testid=\"title\">Other Registers</h1>\n      <ul className=\"OtherRegistersList\">\n        <Word label=\"I\" old={old.I} current={current.I} bytes={2} />\n        <Word label=\"DT\" old={old.DT} current={current.DT} bytes={1} />\n        <Word label=\"ST\" old={old.ST} current={current.ST} bytes={1} />\n      </ul>\n    </section>\n  );\n};\n\nOtherRegisters.defaultProps = {\n  old: { I: 0, DT: 0, ST: 0 },\n  current: { I: 0, DT: 0, ST: 0 }\n};\n\nexport default OtherRegisters;\n","import OtherRegisters from './OtherRegisters';\n\nexport default OtherRegisters;\n","import Button from './Button';\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport './Button.css';\n\nconst Button = props => (\n  <div\n    role=\"button\"\n    aria-label={props.children}\n    className=\"Button\"\n    onClick={props.onClick}\n    onMouseUp={props.onMouseUp}\n    onMouseDown={props.onMouseDown}\n    tabIndex=\"0\"\n  >\n    {props.children}\n  </div>\n);\n\nexport default Button;\n","import React from 'react';\nimport './SelectROM.css';\nimport Button from '../Button';\n\nconst PlayButton = props => {\n  const label = props.playing ? 'Reset' : 'Start';\n  return <Button onClick={props.onClick}>{label}</Button>;\n};\n\nconst RomList = props => {\n  const options = props.roms.map((rom, index) => {\n    return (\n      <option className=\"RomListOption\" key={index} value={rom.value}>\n        {rom.label}\n      </option>\n    );\n  });\n  return (\n    <select className=\"RomList\" onChange={props.onChange}>\n      {options}\n    </select>\n  );\n};\n\nclass SelectROM extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.state = {\n      playing: false,\n      rom: 'Airplane.ch8',\n      roms: [\n        { value: 'Airplane.ch8', label: 'Airplane' },\n        { value: 'LunarLander.ch8', label: 'Lunar Lander' },\n        { value: 'Pong.ch8', label: 'Pong' },\n        { value: 'Maze.ch8', label: 'Maze' }\n      ]\n    };\n  }\n\n  onPlayClick = async () => {\n    this.setState({\n      playing: true\n    });\n    const selectedRom = this.state.roms.find(x => x.value === this.state.rom);\n\n    if (selectedRom.rom) {\n      this.props.onPlay(selectedRom.rom);\n      return;\n    } else {\n      const response = await fetch('./' + selectedRom.value);\n      const arrayBuffer = await response.arrayBuffer();\n      const rom = new Uint8Array(arrayBuffer);\n      this.props.onPlay(rom);\n    }\n  };\n\n  onLoadRom = () => {\n    this.inputRef.current.click();\n  };\n\n  onRomSelectChange = evt => {\n    this.setState({\n      rom: evt.target.value\n    });\n  };\n\n  onFileChange = evt => {\n    evt.preventDefault();\n\n    const file = evt.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n\n    reader.onload = event => {\n      const arrayBufferNew = event.target.result;\n      this.setState({\n        roms: [\n          ...this.state.roms,\n          {\n            label: file.name,\n            value: file.name,\n            rom: new Uint8Array(arrayBufferNew)\n          }\n        ]\n      });\n\n      this.inputRef.current.blur();\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  render() {\n    return (\n      <div className=\"SelectROM\">\n        <input\n          ref={this.inputRef}\n          type=\"file\"\n          onChange={this.onFileChange}\n          className=\"SelectROMInput\"\n        />\n        <RomList\n          roms={this.state.roms}\n          onChange={this.onRomSelectChange}\n        ></RomList>\n        <PlayButton\n          playing={this.state.playing}\n          onClick={this.onPlayClick}\n        ></PlayButton>\n        <span>or</span>\n        <Button onClick={this.onLoadRom}>Upload ROM</Button>\n      </div>\n    );\n  }\n}\n\nexport default SelectROM;\n","import SelectROM from './SelectROM';\n\nexport default SelectROM;\n","import React, { useEffect } from 'react';\nimport './Keypad.css';\n\nimport Button from '../Button';\n\n// 1\t2\t3\tC\n// 4\t5\t6\tD\n// 7\t8\t9\tE\n// A\t0\tB\tF\n// prettier-ignore\nconst keyMap = {\n  '1': 0x1, '2': 0x2, '3': 0x3, '4': 0xc,\n  q: 0x4, w: 0x5, e: 0x6, r: 0xd,\n  a: 0x7, s: 0x8, d: 0x9, f: 0xe,\n  z: 0xa, x: 0x0, c: 0xb, v: 0xf\n};\n\n// prettier-ignore\nconst keys = [ 0x1, 0x2, 0x3, 0xc, 0x4, 0x5, 0x6, 0xd, 0x7, 0x8, 0x9, 0xe, 0xa, 0x0, 0xb, 0xf ];\n\nconst Keypad = props => {\n  const handleKeyBoardevent = (key, pressed) => {\n    const keyFromEvent = keyMap[key];\n\n    keyStateUpdate(keyFromEvent, pressed);\n  };\n\n  const keyStateUpdate = (key, pressed) => {\n    if (pressed) {\n      props.onKeydown(key);\n    } else {\n      props.onKeyup(key);\n    }\n  };\n\n  const onKeydown = evt => handleKeyBoardevent(evt.key, true);\n  const onKeyup = evt => handleKeyBoardevent(evt.key, false);\n  const onMouseDown = key => keyStateUpdate(key, true);\n  const onMouseUp = key => keyStateUpdate(key, false);\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeydown);\n    document.addEventListener('keyup', onKeyup);\n\n    return () => {\n      document.removeEventListener('keydown', onKeydown);\n      document.removeEventListener('keyup', onKeyup);\n    };\n  });\n\n  return (\n    <section className=\"Keypad\">\n      <h1>Keypad</h1>\n      <div className=\"Keys\">\n        {keys.map(key => (\n          <Button\n            key={key}\n            onMouseUp={() => onMouseUp(key)}\n            onMouseDown={() => onMouseDown(key)}\n          >\n            {key.toString(16).toUpperCase()}\n          </Button>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default Keypad;\n","import Keypad from './Keypad';\n\nexport default Keypad;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport './App.css';\n\nimport Chip8 from '../../interpreter/chip8';\nimport Screen from '../Screen';\nimport VRegisters from '../VRegisters';\nimport Stack from '../Stack';\nimport Debug from '../Debug';\nimport OtherRegisters from '../OtherRegisters';\nimport SelectROM from '../SelectROM';\nimport Keypad from '../Keypad';\nimport Button from '../Button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakpointHit: false,\n      displayData: new Array(0).fill(0),\n      otherRegisters: {\n        old: { I: 0, DT: 0, ST: 0, PC: 0 },\n        current: { I: 0, DT: 0, ST: 0, PC: 0 }\n      },\n      V: {\n        old: new Uint8Array(16).fill(0),\n        current: new Uint8Array(16).fill(0)\n      },\n      stack: {\n        old: { SP: 0, stack: new Uint16Array(16) },\n        current: { SP: 0, stack: new Uint16Array(16) }\n      },\n      debug: {\n        breakpoint: 0,\n        old: { PC: 0x200, memorySlice: new Uint8Array(14) },\n        current: { PC: 0x200, memorySlice: new Uint8Array(14) }\n      }\n    };\n    this.myRef = React.createRef();\n    this.intervalHandle = null;\n    this.cyclesPerTick = 10;\n    this.chip8 = new Chip8();\n  }\n\n  stopClock() {\n    if (this.intervalHandle) {\n      clearInterval(this.intervalHandle);\n    }\n  }\n\n  startClock() {\n    // Start our CPU at 60Hz\n    const frequency = 1000 / 60;\n    this.intervalHandle = setInterval(this.cycle, frequency);\n  }\n\n  onPlay = rom => {\n    this.stopClock();\n\n    this.chip8.reset();\n    // Load the ROM\n    let addr = 0x200;\n    rom.forEach(byte => {\n      this.chip8.writeByte(addr, byte);\n      addr++;\n    });\n\n    this.startClock();\n  };\n\n  cycle = () => {\n    let remainingCycles = this.cyclesPerTick;\n    while (remainingCycles > 0) {\n      // When hitting the breakpoint stop\n      // the clock and make sure UI state is updated\n      if (this.chip8.PC === Number.parseInt(this.state.debug.breakpoint, 16)) {\n        this.stopClock();\n        this.updateChip8State(true);\n        return;\n      }\n      this.chip8.cycle();\n      remainingCycles--;\n    }\n\n    this.chip8.soundTimerTick();\n    this.chip8.delayTimerTick();\n\n    this.updateChip8State();\n  };\n\n  updateChip8State(onBreakpoint) {\n    setTimeout(() => {\n      this.setState({\n        breakpointHit: onBreakpoint || false,\n        displayData: this.chip8.display,\n        otherRegisters: {\n          old: this.state.otherRegisters.current,\n          current: { I: this.chip8.I, DT: this.chip8.DT, ST: this.chip8.ST }\n        },\n        V: { old: this.state.V.current, current: this.chip8.V },\n        stack: {\n          old: this.state.stack.current,\n          current: { SP: this.chip8.SP, stack: this.chip8.stack }\n        },\n        debug: {\n          breakpoint: this.state.debug.breakpoint,\n          old: this.state.debug.current,\n          current: {\n            PC: this.chip8.PC,\n            memorySlice: this.memorySlice(this.chip8.PC, this.chip8.memory)\n          }\n        }\n      });\n    }, 0);\n  }\n\n  memorySlice(pc, memory) {\n    return memory.slice(pc, pc + 14);\n  }\n\n  onKeydown = key => {\n    this.chip8.pressKey(key);\n  };\n\n  onKeyup = key => {\n    this.chip8.releaseKey(key);\n  };\n\n  onContinue = () => {\n    this.startClock();\n  };\n\n  onStep = () => {\n    this.chip8.cycle();\n    this.chip8.soundTimerTick();\n    this.chip8.delayTimerTick();\n    this.updateChip8State(true);\n  };\n\n  onBreakpointChange = evt => {\n    this.setState({\n      debug: {\n        ...this.state.debug,\n        breakpoint: evt.target.value\n      }\n    });\n  };\n\n  renderControls() {\n    if (this.state.breakpointHit) {\n      return (\n        <div className=\"DebugControls\">\n          <Button onClick={this.onContinue}>Continue</Button>\n          <Button onClick={this.onStep}>Step</Button>\n        </div>\n      );\n    } else {\n      return <SelectROM onPlay={this.onPlay} />;\n    }\n  }\n\n  render() {\n    const otherRegisters = this.state.otherRegisters;\n    const V = this.state.V;\n    const stack = this.state.stack;\n\n    const debug = this.state.debug;\n    const breakpoint = this.state.debug.breakpoint;\n\n    return (\n      <div className=\"App\">\n        <header className=\"Header\">\n          <h1>Chip-8</h1>\n          {this.renderControls()}\n        </header>\n        <main className=\"DisplayView\">\n          <Screen displayData={this.state.displayData} />\n        </main>\n        <footer className=\"MemoryView\">\n          <Keypad onKeydown={this.onKeydown} onKeyup={this.onKeyup} />\n          <OtherRegisters\n            old={otherRegisters.old}\n            current={otherRegisters.current}\n          />\n          <VRegisters old={V.old} current={V.current} />\n          <Stack old={stack.old} current={stack.current} />\n          <Debug\n            breakpoint={breakpoint}\n            old={debug.old}\n            current={debug.current}\n            onChange={this.onBreakpointChange}\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}